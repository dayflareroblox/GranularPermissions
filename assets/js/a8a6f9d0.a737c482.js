"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[434],{9612:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new GranularPermissions instance.","params":[],"returns":[{"desc":"Returns the GranularPermissions instance.","lua_type":"GranularPermissions"}],"function_type":"static","source":{"line":23,"path":"init.luau"}},{"name":"IsAuthorised","desc":"This function checks if a player is authorized based on a given set of permissions.","params":[{"name":"Player","desc":"The player whose permissions are being checked","lua_type":"Player"},{"name":"Permissions","desc":"A list of permissions to evaluate","lua_type":"{any}"}],"returns":[{"desc":"Returns `true` if the player is authorized, otherwise `false`","lua_type":"boolean"}],"function_type":"method","source":{"line":42,"path":"init.luau"}},{"name":"GetCallback","desc":"This function retrieves and executes a registered callback for the provided arguments.","params":[{"name":"Callback","desc":"The name of the callback to execute","lua_type":"string"},{"name":"...","desc":"Additional arguments to pass to the callback","lua_type":"any"}],"returns":[{"desc":"Returns the result of the callback, or `nil` if the callback is not found","lua_type":"boolean?"}],"function_type":"method","source":{"line":101,"path":"init.luau"}},{"name":"RegisterReplacement","desc":"This function registers a single replacement for use in permission strings.","params":[{"name":"ReplacementName","desc":"The name of the replacement","lua_type":"string"},{"name":"ReplaceWith","desc":"The value to replace with","lua_type":"string | number"}],"returns":[],"function_type":"method","source":{"line":113,"path":"init.luau"}},{"name":"RegisterReplacementsBulk","desc":"This function registers multiple replacements in bulk.","params":[{"name":"Replacements","desc":"A list of replacements to register","lua_type":"{{ReplacementName: string, ReplaceWith: string | number}}"}],"returns":[{"desc":"Returns `true` after successfully registering all replacements","lua_type":"boolean"}],"function_type":"method","source":{"line":123,"path":"init.luau"}},{"name":"RegisterCallback","desc":"This function registers a callback function to evaluate permissions dynamically.","params":[{"name":"CallbackName","desc":"The name of the callback","lua_type":"string"},{"name":"Callback","desc":"The function to execute for the callback","lua_type":"(self: GranularPermissions, ...any) -> boolean"}],"returns":[{"desc":"Returns `true` if the callback was registered, or `false` if it already exists","lua_type":"boolean"}],"function_type":"method","source":{"line":138,"path":"init.luau"}},{"name":"Destroy","desc":"This function cleans up and destroys the `GranularPermissions` instance.","params":[],"returns":[],"function_type":"method","source":{"line":150,"path":"init.luau"}}],"properties":[{"name":"Configuration","desc":"","lua_type":"{SplittingSyntax: string}","source":{"line":18,"path":"init.luau"}}],"types":[],"name":"GranularPermissions","desc":"The `GranularPermissions` class is designed to manage and evaluate complex permission sets for players. \\nIt supports customizable permission checks, dynamic replacements, and flexible splitting syntax.","source":{"line":10,"path":"init.luau"}}')}}]);